#!/usr/bin/env python3
from __future__ import annotations

from ...schemas.tooling import ToolSpec


class GoogleCodeExecution:
    """Factory for Google Gemini code execution tool.

    The Gemini API code execution feature enables the model to generate and run Python
    code based on plain-text instructions, with support for iterative learning from
    results and advanced data analysis capabilities.

    Key Features:
    - **Python Code Generation & Execution**: Model generates and runs Python code server-side
    - **Iterative Learning**: Model can learn from execution results and refine code
    - **File I/O Support**: Works with uploaded files (CSV, TXT) via Gemini File API
    - **Rich Output Support**: Text, code, execution results, and inline data (images/graphs)
    - **Extensive Libraries**: numpy, pandas, matplotlib, seaborn, scikit-learn, PIL, etc.
    - **Graph Generation**: Create and display visualizations (plots, charts, images)
    - **Multi-turn Conversations**: Works seamlessly in chat contexts
    - **Streaming Support**: Real-time code generation and execution

    Response Parts:
    - `text`: Inline text generated by the model
    - `executable_code`: Python code generated by the model
    - `code_execution_result`: Output/results from code execution
    - `inline_data`: Generated media (graphs, images) as base64 data

    Usage Examples:
        # Basic mathematical calculations
        agent = Agent(provider="google", model="gemini-2.5-flash", api_key=api_key)
        response = agent.generate(
            "Calculate the sum of the first 50 prime numbers. Generate and run code.",
            tools=["google_code_execution"]
        )

        # Data analysis with file uploads
        response = agent.generate(
            "Analyze this dataset and create visualizations",
            tools=["google_code_execution"]
        )

        # Complex algorithms and simulations
        response = agent.generate(
            "Run a Monte Carlo simulation of the Monty Hall Problem with 1,000 trials",
            tools=["google_code_execution"]
        )

    Supported Models:
    - gemini-2.5-flash, gemini-2.5-pro (recommended)
    - gemini-2.0-flash
    - All models support code execution with varying capabilities

    Technical Details:
    - Execution timeout: ~30 seconds maximum runtime
    - Sandboxed environment: Secure Python execution
    - Memory limits: Suitable for most data analysis tasks
    - File support: CSV, TXT files work best (via File API)
    - Output formats: Text, images (PNG), data files

    Note: For complex datasets or heavy computations, consider using gemini-2.5-pro
    for better performance and larger context windows.
    """

    def spec(self) -> ToolSpec:
        return ToolSpec(
            name="code_execution",
            description="Google Gemini code execution tool - generates and runs Python code with data analysis and visualization capabilities",
            input_schema={},
            requires_network=False,  # Runs in secure sandboxed environment
            requires_filesystem=True,  # Can work with uploaded files
            provider="google",
            provider_type="code_execution",
            provider_config=None,
        )
